/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define OTH_L 2
#define NUM_L 3
#define SYM_L 4
#define MED_L 5
#define FUN_L 6


#define SK(KEY) &nk KEY KEY
// Keep sticky keys active for a long time so they effectively do not time out
#define STICKY_KEY_TIMEOUT 60000

&sk {
  release-after-ms = <STICKY_KEY_TIMEOUT>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/* KEY POSITIONS
  ╭───────────────────────╮          ╭───────────────────────╮
  │      0   1   2  3  4  │          │ 5   6   7   8   9     │
  │     10  11  12 13  14 │          │ 15  16  17  18  19    │
  │     20  21  22  23 24  ───╮ ╭────  25  26  27  28  29    │
  ╰─────────────────╮  30  31 │ │ 32  33 ╭───────────────────╯
                    ╰─────────╯ ╰────────╯           
*/

/ { 
  
                
//   combos {
//     #include "combos.dtsi"
//   };
  
//   macros {
//     #include "macros.dtsi"
//   };

  behaviors {
    // Sticky key on tap, normal key on hold
    // Useful for modifier-clicking without the modifier remaining active
     nk: not_so_sticky_key {
       compatible = "zmk,behavior-hold-tap";
       label = "NOT_SO_STICKY_KEY";
       #binding-cells = <2>;
       tapping_term_ms = <200>;
       flavor = "tap-preferred";
       bindings = <&kp>, <&sk>;
     };

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      quick-release;
      release-after-ms = <STICKY_KEY_TIMEOUT>;
    };
  };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                &kp Q     &kp W      &kp E       &kp R          &kp T             &kp Y            &kp U          &kp I       &kp O      &kp P
                &kp A     &kp S      &kp D       &kp F          &kp G             &kp H            &kp J          &kp K       &kp L      &kp QUOT
                &kp Z     &kp X      &kp C       &kp V          &kp B             &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH
                                     &lt NAV_L SPACE  &kp TAB                     &kp BKSP  &kp RET
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans      &trans     &trans
                SK(LGUI)  SK(LALT)    SK(LSHIFT)  SK(LCTL)        &trans       &trans           &kp LARW       &kp DARW    &kp UARW   &kp RARW
                &trans     &trans     &trans      &trans          &trans       &trans           &kp HOME       &kp PG_DN   &kp PG_UP  &kp END
                                                  &trans          &trans       &kp ESC          &kp DEL
            >;
        };

        // other_layer {
        //     label = "Other";
        //     bindings = <
        //         &trans	   &trans     &trans      &trans          &trans       &unstick           &trans         &trans       &trans       &bt BT_CLR
        //         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
        //         &trans     &trans     &trans      &trans          &trans       &bt BT_SEL 0     &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
        //                                           &trans          &trans       &trans           &trans
        //     >;
        // };

        // num_layer {
        //     label = "Num";
        //     bindings = <
        //         &kp LBKT   &kp N7     &kp N8      &kp N9          &kp RBKT      &trans          &trans         &trans      &trans     &trans
        //         &kp SEMI   &kp N4     &kp N5      &kp N6          &kp EQUAL     &trans          &trans         &trans      &trans     &trans
        //         &kp GRAVE  &kp N1     &kp N2      &kp N3          &kp BSLH      &trans          &trans         &trans      &trans     &trans
        //                                           &kp N0          &kp MINUS     &trans          &trans
        //     >;
        // };

        // sym_layer {
        //     label = "Sym";
        //     bindings = <
        //         &kp LBRC     &kp LS(N7)  &kp LS(N8)  &kp LS(N9) &kp RBRC        &trans &trans   &trans    &trans    &trans
        //         &kp COLON    &kp LS(N4)  &kp LS(N5)  &kp LS(N6) &kp PLUS        &trans &trans   &trans    &trans    &trans
        //         &kp TILDE    &kp LS(N1)  &kp LS(N2)  &kp LS(N3) &kp LS(BSLH)    &trans &trans   &trans    &trans    &trans
        //                                            &kp LS(N0) &kp UNDER         &trans &trans
        //     >;
        // };

        // media_layer {
        //     label = "Media";
        //     bindings = <
        //         &trans	   &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
        //         &trans     &trans     &trans      &trans          &trans       &trans           &kp C_PREV     &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT
        //         &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
        //                                           &trans          &trans       &kp C_STOP       &kp C_PLAY_PAUSE
        //     >;
        // };

        // fun_layer {
        //     label = "Fun";
        //     bindings = <
        //         &kp F12     &kp F7     &kp F8      &kp F9     &kp PSCRN         &trans          &trans         &trans      &trans     &trans
        //         &kp F11     &kp F4     &kp F5      &kp F6     &kp SLCK          &trans          &trans         &trans      &trans     &trans
        //         &kp F10     &kp F1     &kp F2      &kp F3     &kp PAUSE_BREAK   &trans          &trans         &trans      &trans     &trans
        //                                            &none      &none             &trans          &trans
        //     >;
        // };




    };
};
